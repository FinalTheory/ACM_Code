/**
 * @file POJ_1426_2.cpp
 * @brief   先前知道这题是打表过的，所以这次直接就猥琐了一把。
 * 直接DFS构造可能的答案，验证就行了。最后还是……打表……
 * @author FinalTheory
 * @version 0.1
 * @date 2013-07-18
 */
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <cctype>
#include <climits>
#include <ctime>
#include <vector>
#include <set>
#include <stack>
#include <sstream>
#include <iomanip>

#define CLR(arr,val) memset(arr,val,sizeof(arr))
typedef unsigned long long ULL;
using namespace std;

// int num, depth;
// ULL check;
// bool found;
// char buffer[110];

char * res[205] = {};

// void DFS( int n )
// {
// 	if ( found )
// 		return;
// 	if ( n == depth )
// 	{
// 		buffer[n] = 0;
// 		sscanf(buffer, "%llu", &check);
// 		if ( check >= num && check % num == 0 )
// 		{
// 			found = 1;
// 			printf("\"%llu\", ", check);
// 		}
// 		return;
// 	}
// 	buffer[n] = '0';
// 	DFS( n + 1 );
// 	buffer[n] = '1';
// 	DFS( n + 1 );
// }

int main()
{
	std::ios::sync_with_stdio(false);
#ifndef ONLINE_JUDGE
	freopen( "in.txt", "r", stdin );
	//freopen( "out.txt", "w", stdout );
	clock_t program_start, program_end;
	program_start = clock();
#endif
// 	printf("{");
// 	for ( num = 2; num <= 200; ++num  )
// 	{
// 		found = 0;
// 		for ( depth = 1; depth < 40 && !found; ++depth )
// 			DFS(0);
// 	}
// 	printf("}");
	int n;
	while ( cin >> n && n )
		cout << res[n] << endl;
#ifndef ONLINE_JUDGE
	program_end = clock();
	cerr << "Time consumed: " << endl << ( program_end - program_start ) << " MS" << endl;
#endif
}
